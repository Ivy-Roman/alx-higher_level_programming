=======================
How to Use 1-my_list.py
=======================

This module defines a class ``MyList`` that inherits from ``list``.

Instantiation
=============

``MyList`` can be instantiated with no arguments, which will return
an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Or a single argument, which must be an iterable object.

::

    >>> my_list = MyList([8, 9, 10])
    >>> print(my_list)
    [8, 9, 10]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


A ``TypeError`` will be raised for any more than one instantiation arguments.

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
	...
    TypeError: list expected at most 1 argument, got 2

Usage
=====

``MyList`` is an inherited ``list`` class, and thus features the same methods.
For instance, elements can be added to a ``MyList`` with the ``append()`` method.

::

    >>> my_list = MyList()
    >>> my_list.append(8)
    >>> my_list.append(9)
    >>> my_list.append(10)
    >>> print(my_list)
    [8, 9, 10]

Replaced with indexing:

::

    >>> my_list[0] = 6
    >>> print(my_list)
    [6, 9, 10]

And removed with the ``remove()`` method.

::

    >>> my_list.remove(6)
    >>> print(my_list)
    [9, 10]

See the documentation on Python lists for more built-in methods.

``print_sorted`` Method
=======================

``MyList`` implements a single method - a public instance method
``print_sorted(self)``.

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

The method takes no arguments - a TypeError will be raised if an argument is
provided.

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending sorted order.

::

    >>> my_list.append(0)
    >>> my_list.append(3)
    >>> my_list.append(1)
    >>> my_list.append(9)
    >>> my_list.append(2)
    >>> print(my_list)
    [0, 3, 1, 9, 2]

::

    >>> my_list.print_sorted()
    [0, 1, 2, 3, 9]

The order of the original list is not altered after a call to the method.

::

    >>> print(my_list)
    [0, 3, 1, 9, 2]

Note that lists of strings are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Ivy")
    >>> my_list.append("Noel")
    >>> my_list.append("Lulu")
    >>> my_list.append("Sara")
    >>> my_list.append("Osoiye")
    >>> print(my_list)
    ['Ivy', 'Noel', 'Lulu', 'Sara', 'Osoiye']

::

    >>> my_list.print_sorted()
    ['Ivy', 'Lulu', 'Noel', 'Osoiye', 'Sara']

Another friendly reminder that the original list is unaltered :)

::

    >>> print(my_list)
    ['Ivy', 'Noel', 'Lulu', 'Sara', 'Osoiye']

Nothing to sort with empty lists.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

    >>> my_list = MyList([8, "Ivy", "Roman", 10])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
	...
    TypeError: '<' not supported between instances of 'str' and 'int'
